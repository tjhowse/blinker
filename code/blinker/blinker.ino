#define ws2812_port B     // Data port
#define ws2812_pin  2     // Data out pin


#include <util/delay.h>
#include <avr/io.h>
#include <avr/interrupt.h>

#include "attiny10_ws2812.h"  // Include the ws2812 library
#include "tomthumb_5x3_font.h" // Include the font header
// #include "smaz.h"

// "DID YOU EVER HEAR THE TRAGEDY OF DARTH PLAGUEIS THE WISE I THOUGHT NOT ITS NOT A STORY THE JEDI WOULD TELL YOU ITS A SITH LEGEND DARTH PLAGUEIS WAS A DARK LORD OF THE SITH SO POWERFUL AND SO WISE HE COULD USE THE FORCE TO INFLUENCE THE MIDICHLORIANS TO CREATE LIFE"
const uint8_t message[] = {0x00, 0x99, 0x92, 0x40, 0xfe, 0xd6, 0x40, 0x69, 0x97, 0x32, 0x80, 0x96, 0xa1, 0x0c, 0xd0, 0x68, 0x09, 0xd0, 0x72, 0x78, 0x96, 0x64, 0x0e, 0xbc, 0x26, 0x40, 0x86, 0x32, 0x8d, 0x02, 0x30, 0x1b, 0x9e, 0x75, 0x99, 0xce, 0x00, 0x8d, 0x96, 0xc0, 0x9d, 0xce, 0x25, 0x90, 0x02, 0x34, 0xfa, 0xd6, 0x27, 0x4a, 0x03, 0xee, 0x4b, 0x03, 0x29, 0x3d, 0x03, 0xee, 0x4b, 0x03, 0x21, 0x30, 0xd3, 0xaf, 0x9c, 0x03, 0x34, 0x5a, 0x02, 0x6a, 0x49, 0xa6, 0xc0, 0xfd, 0xd6, 0x2c, 0x09, 0xd0, 0x25, 0xcb, 0x02, 0xf9, 0x5b, 0x03, 0x29, 0x3d, 0x03, 0x21, 0x30, 0xa7, 0x34, 0x0a, 0xb0, 0xe5, 0x59, 0xba, 0x24, 0x40, 0x86, 0x32, 0x8d, 0x02, 0x30, 0x1b, 0x9e, 0x75, 0x99, 0xce, 0xc0, 0x1d, 0xce, 0x40, 0x08, 0x90, 0xa1, 0xbc, 0x02, 0xec, 0x2b, 0x93, 0xc0, 0x6b, 0x02, 0x34, 0x5a, 0x02, 0x73, 0x4a, 0xa3, 0xc0, 0xfc, 0x02, 0xf0, 0x7b, 0x97, 0xb2, 0x59, 0xb3, 0x40, 0xe8, 0x92, 0xc0, 0xfc, 0x02, 0x77, 0x3a, 0x97, 0x00, 0x5a, 0x02, 0xe3, 0x5b, 0xb3, 0x24, 0x50, 0xcf, 0x25, 0x40, 0xa3, 0x25, 0x60, 0xbe, 0xf2, 0x58, 0x02, 0xf4, 0x0b, 0xa4, 0xae, 0xc9, 0xd6, 0xa5, 0x3b, 0x96, 0x00, 0x8d, 0x96, 0x40, 0x9b, 0x92, 0xe9, 0x88, 0xb2, 0xaf, 0x9c, 0x86, 0xee, 0x0c, 0xd0, 0x2f, 0x30, 0xca, 0x65, 0x48, 0x97, 0x00, 0x9b, 0x9a, 0x25, 0x99, 0x92, 0x40, 0xfe, 0xd6, 0x40, 0x69, 0x97, 0x32, 0x80, 0x96, 0xa1, 0x0c, 0xd0, 0x68, 0x09, 0xd0, 0x72, 0x78, 0x96, 0x64, 0x0e, 0xbc, 0x26, 0x40, 0x86, 0x32, 0x8d, 0x02, 0x30, 0x1b, 0x9e, 0x75, 0x99, 0xce, 0x00, 0x8d, 0x96, 0xc0, 0x9d, 0xce, 0x25, 0x90, 0x02, 0x34, 0xfa, 0xd6, 0x27, 0x4a, 0x03, 0xee, 0x4b, 0x03, 0x29, 0x3d, 0x03, 0xee, 0x4b, 0x03, 0x21, 0x30, 0xd3, 0xaf, 0x9c, 0x03, 0x34, 0x5a, 0x02, 0x6a, 0x49, 0xa6, 0xc0, 0xfd, 0xd6, 0x2c, 0x09, 0xd0, 0x25, 0xcb, 0x02, 0xf9, 0x5b, 0x03, 0x29, 0x3d, 0x03, 0x21, 0x30, 0xa7, 0x34, 0x0a, 0xb0, 0xe5, 0x59, 0xba, 0x24, 0x40, 0x86, 0x32, 0x8d, 0x02, 0x30, 0x1b, 0x9e, 0x75, 0x99, 0xce, 0xc0, 0x1d, 0xce, 0x40, 0x08, 0x90, 0xa1, 0xbc, 0x02, 0xec, 0x2b, 0x93, 0xc0, 0x6b, 0x02, 0x34, 0x5a, 0x02, 0x73, 0x4a, 0xa3, 0xc0, 0xfc, 0x02, 0xf0, 0x7b, 0x97, 0xb2, 0x59, 0xb3, 0x40, 0xe8, 0x92, 0xc0, 0xfc, 0x02, 0x77, 0x3a, 0x97, 0x00, 0x5a, 0x02, 0xe3, 0x5b, 0xb3, 0x24, 0x50, 0xcf, 0x25, 0x40, 0xa3, 0x25, 0x60, 0xbe, 0xf2, 0x58, 0x02, 0xf4, 0x0b, 0xa4, 0xae, 0xc9, 0xd6, 0xa5, 0x3b, 0x96, 0x00, 0x8d, 0x96, 0x40, 0x9b, 0x92, 0xe9, 0x88, 0xb2, 0xaf, 0x9c, 0x86, 0xee, 0x0c, 0xd0, 0x2f, 0x30, 0xca, 0x65, 0x48, 0x97, 0x00, 0x9b, 0x9a, 0x25, 0x99, 0x92, 0x40, 0xfe, 0xd6, 0x40, 0x69, 0x97, 0x32, 0x80, 0x96, 0xa1, 0x0c, 0xd0, 0x68, 0x09, 0xd0, 0x72, 0x78, 0x96, 0x64, 0x0e, 0xbc, 0x26, 0x40, 0x86, 0x32, 0x8d, 0x02, 0x30, 0x1b, 0x9e, 0x75, 0x99, 0xce, 0x00, 0x8d, 0x96, 0xc0, 0x9d, 0xce, 0x25, 0x90, 0x02, 0x34, 0xfa, 0xd6, 0x27, 0x4a, 0x03, 0xee, 0x4b, 0x03, 0x29, 0x3d, 0x03, 0xee, 0x4b, 0x03, 0x21, 0x30, 0xd3, 0xaf, 0x9c, 0x03, 0x34, 0x5a, 0x02, 0x6a, 0x49, 0xa6, 0xc0, 0xfd, 0xd6, 0x2c, 0x09, 0xd0, 0x25, 0xcb};
const uint16_t message_len = (sizeof(message)*8)/6;
// Note: These are GRB values.
const cRGB ledOff = {0,0,0};
const cRGB ledOn = {16,16,16};
const cRGB ledRed = {0,16,0};

int main(void)
{

#ifdef __AVR_ATtiny10__
  CCP=0xD8;   // configuration change protection, write signature
  CLKPSR=0;   // set cpu clock prescaler =1 (8Mhz) (attiny 4/5/9/10)

#else
  CLKPR=_BV(CLKPCE);
  CLKPR=0;      // set clock prescaler to 1 (attiny 25/45/85/24/44/84/13/13A)

#endif
  DDRB|=_BV(ws2812_pin);

  while (1) {
    for (uint16_t charIndex = 0; charIndex < message_len; charIndex++) {
      // int index = ((charIndex*6)/8);
      // int shift = (charIndex*6)%8;
      // unsigned int twobytes = (message[((charIndex*6)/8)] | message[((charIndex*6)/8)+1] << 8);
      uint8_t c = (((message[((charIndex*6)/8)] | message[((charIndex*6)/8)+1] << 8) >> ((charIndex*6)%8)) & 0x003F) * 2;
      uint16_t bitmap = (TomThumbBitmaps[c] << 8) | TomThumbBitmaps[c + 1];
      // uint16_t bitmap = getBitmapForCharacter('B');
      for (uint8_t column = 2; column <= 2 && column >= 0; column--) {
        for (uint8_t row = 4; row <= 4 && row >= 0; row--) {
          if ((bitmap >> (15-(column + row*3))) & 0x1) {
            ws2812_sendarray((uint8_t *)&ledOn,3);
          } else {
            // ws2812_sendarray((uint8_t *)&ledOn,3);
            ws2812_sendarray((uint8_t *)&ledOff,3);
          }
        }
      }
      // _delay_ms(50);
      _delay_ms(400);
      for (uint8_t j = 0; j < 15; j++) {
        ws2812_sendarray((uint8_t *)&ledOff,3);
      }
      _delay_ms(300);
    }
  }

  // uint8_t pos=0;
  // uint8_t direction=1;
  // uint8_t i;

  // while(1)
  //   {

  //   for (i=0; i<pos; i++)
  //     ws2812_sendarray((uint8_t *)&ledRed,3);     // Repeatedly send "red" to the led string.
  //                             // No more than 1-2 s should pass between calls
  //                             // to avoid issuing a reset condition.
  //   for (i=0; i<(30-pos); i++)
  //     ws2812_sendarray((uint8_t *)&ledOn,3);     // white


  //   _delay_ms(50);                    // Issue reset and wait for 50 ms.

  //   pos+=direction;
  //   if ((pos==16)||(pos==0)) direction=-direction;
  //   }
}
