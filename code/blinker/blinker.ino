// uint8_t const sequence[] = {170, 34, 234, 46, 163, 187, 128, 174, 139, 163, 187, 142, 224, 56, 170, 32, 42, 142, 238, 46, 226, 162, 2, 186, 46, 59, 138, 46, 163, 174, 224, 56, 186, 46, 42, 226, 138, 128, 238, 40, 235, 162, 168, 139, 168, 186, 136, 11, 139, 168, 142, 174, 2, 227, 163, 168, 10, 139, 142, 224};
// uint8_t const sequence[] = {187, 162, 226, 232, 162, 160, 46, 232, 184, 186, 40, 168, 11, 186, 46, 46, 138, 42, 2, 238, 139, 139, 162, 138, 128, 187, 162, 226, 232, 162, 160, 46, 232, 184, 186, 40, 168, 11, 186, 46, 46, 138, 42, 2, 238, 139, 139, 162, 138, 128, 187, 162, 226, 232, 162, 160, 46, 232, 184, 186, 40, 168, 11, 186, 46, 46, 138, 42, 2, 238, 139, 139, 162, 138, 128, 187, 162, 226, 232, 162, 160, 46, 232, 184, 186, 40, 168, 11, 186, 46, 46, 138, 42, 2, 238, 139, 139, 162, 138, 128, 187, 162, 226, 232, 162, 160, 46, 232, 184, 186, 40, 168, 11, 186, 46, 46, 138, 42, 2, 238, 139, 139, 162, 138, 128, 187, 162, 226, 232, 162, 160, 46, 232, 184, 186, 40, 168, 11, 186, 46, 46, 138, 42, 2, 238, 139, 139, 162, 138, 128, 187, 162, 226, 232, 162, 160, 46, 232, 184, 186, 40, 168, 11, 186, 46, 46, 138, 42, 2, 238, 139, 139, 162, 138, 128, 187, 162, 226, 232, 162, 160, 46, 232, 184, 186, 40, 168, 11, 186, 46, 46, 138, 42, 2, 238, 139, 139, 162, 138, 128, 187, 162, 226, 232, 162, 160, 46, 232, 184, 186, 40, 168, 11, 186, 46, 46, 138, 42, 2, 238, 139, 139, 162, 138, 128, 187, 162, 226, 232, 162, 160, 46, 232, 184, 186, 40, 168, 11, 186, 46, 46, 138, 42, 2, 238, 139, 139, 162, 138, 128, 187, 162, 226, 232, 162, 160, 46, 232, 184, 186, 40, 168, 11, 186, 46, 46, 138, 42, 2, 238, 139, 139, 162, 138, 128, 187, 162, 226, 232, 162, 160, 46, 232, 184, 186, 40, 168, 11, 186, 46, 46, 138, 42, 2, 238, 139, 139, 162, 138, 128, 187, 162, 226, 232, 162, 160, 46, 232, 184, 186, 40, 168, 11, 186, 46, 46, 138, 42, 2, 238, 139, 139, 162, 138, 128, 187, 162, 226, 232, 162, 160, 46, 232, 184, 186, 40, 168, 11, 186, 46, 46, 138, 42, 2, 238, 139, 139, 162, 138, 128, 187, 162, 226, 232, 162, 160, 46, 232, 184, 186, 40, 168, 11, 186, 46, 46, 138, 42, 2, 238, 139, 139, 162, 138, 128, 187, 162, 226, 232, 162, 160, 46, 232, 184, 186, 40, 168, 11, 186, 46, 46, 138, 42, 2, 238, 139, 139, 162, 138, 128, 187, 162, 226, 232, 162, 160, 46, 232, 184, 186, 40, 168, 11, 186, 46, 46, 138, 42, 2, 238, 139, 139, 162, 138, 128, 187, 162, 226, 232, 162, 160, 46, 232, 184, 186, 40, 168, 11, 186, 46, 46, 138, 42, 2, 238, 139, 139, 162, 138, 128, 187, 162, 226, 232, 162, 160, 46, 232, 184, 186, 40, 168, 11, 186, 46, 46, 138, 42, 2, 238, 139, 139, 162, 138, 128, 187, 162, 226, 232, 162, 160, 46, 232, 184, 186, 40, 168, 11, 186, 46, 46, 138, 42, 2, 238, 139, 139, 162, 138, 128, 187, 162, 226, 232, 162, 160, 46, 232, 184, 186, 40, 168, 11, 186, 46, 46, 138, 42, 2, 238, 139, 139, 162, 138, 128, 187, 162, 226, 232, 162, 160, 46, 232, 184, 186, 40, 168, 11, 186, 46, 46, 138, 42, 2, 238, 139, 139, 162, 138, 128, 187, 162, 226, 232, 162, 160, 46, 232, 184, 186, 40, 168, 11, 186, 46, 46, 138, 42, 2, 238, 139, 139, 162, 138, 128, 187, 162, 226, 232, 162, 160, 46, 232, 184, 186, 40, 168, 11, 186, 46, 46, 138, 42, 2, 238, 139, 139, 162, 138, 128, 187, 162, 226, 232, 162, 160, 46, 232, 184, 186, 40, 168, 11, 186, 46, 46, 138, 42, 2, 238, 139, 139, 162, 138, 128, 187, 162, 226, 232, 162, 160, 46, 232, 184, 186, 40, 168, 11, 186, 46, 46, 138, 42, 2, 238, 139, 139, 162, 138, 128, 187, 162, 226, 232, 162, 160, 46, 232, 184, 186, 40, 168, 11, 186, 46, 46, 138, 42, 2, 238, 139, 139, 162, 138, 128, 187, 162, 226, 232, 162, 160, 46, 232, 184, 186, 40, 168, 11, 186, 46, 46, 138, 42, 2, 238, 139, 139, 162, 138, 128, 187, 162, 226, 232, 162, 160, 46, 232, 184, 186, 40, 168, 11, 186, 46, 46, 138, 42, 2, 238, 139, 139, 162, 138, 128, 187, 162, 226, 232, 162, 160, 46, 232, 184, 186, 40, 168, 11, 186, 46, 46, 138, 42, 2, 238, 139, 139, 162, 138, 128, 187, 162, 226, 232, 162, 160, 46, 232, 184, 186, 40, 168, 11, 186, 46, 46, 138, 42, 2, 238, 139, 139, 162, 138, 128, 187, 162, 226, 232, 162, 160, 46, 232, 184, 186, 40, 168, 11, 186, 46, 46, 138, 42, 2, 238, 139, 139, 162, 138, 128, 187, 162, 226, 232, 162, 160, 46, 232, 184, 186, 40, 168, 0};
uint8_t const sequence[] = {21, 21, 80, 1};

// http://www.technoblogy.com/show?1YQY

uint16_t volatile counter = 0;

uint8_t const WATCHDOG_ON_250MS = 1<<WDIE | 0b100;

// TODO Get rid of this and use a timer.
void delay (int millis) {
  for (volatile unsigned int i = 34*millis; i>0; i--);
}

void setup() {
  DDRB = 0b0100; // PB2 as an output
  PORTB = 0x0100; // PB0 off
  // set_sleep_mode(SLEEP_MODE_PWR_DOWN);
  // WDTCSR = 1<<WDIE | (n & 0x8)<<2 | (n & 0x7);
  // See Table 9-3. Watchdog Timer Prescale Select
  // This sets the watchdog timer to fire approximately every 250ms.
  // WDTCSR = WATCHDOG_ON_250MS
  // sleep_enable();
  // sleep_cpu();
}

// ISR(WDT_vect) {
//   WDTCSR = 0<<WDIE; // Disable watchdog timer.
//   for (counter = 0; counter < sizeof(sequence)*8; counter++ ) {
//     if (sequence[counter>>3] & (0x01 << counter%8)) {
//       PORTB = 0b0000; // PB2 on
//     } else {
//       PORTB = 0b0100; // PB2 off
//     }
//   WDTCSR = 0<<WDIE; // Disable watchdog timer.
// }

void loop() {
  // #TODO move this to an ISR and fire it with a wake-from-sleep vector, if possible.
  for (counter = 0; counter < sizeof(sequence)*8; counter++ ) {
    // PORTB = (uint8_t)(!(bool)(sequence[counter>>3] & (0x01 << counter%8))) << 2;
    if (sequence[counter>>3] & (0x01 << counter%8)) {
      PORTB = 0b0000; // PB2 on
      // PORTB = 0b0100; // PB2 on
    } else {
      PORTB = 0b0100; // PB2 off
    }
    // Sleep for 100ms.
    delay(200);
    // Look at 8. Power Management and Sleep Modes.
    // 9.3. Watchdog Timer
  }
}
